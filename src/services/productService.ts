import { supabase } from '../lib/supabase'
import { Product, ProductFormData, ProductFilters, StockMovementDb } from '../types/product'

export class ProductService {
  // R√©cup√©rer tous les produits avec filtres
  static async getProducts (filters?: ProductFilters): Promise<Product[]> {
    try {
      console.log('üîç R√©cup√©ration des produits avec filtres:', filters)

      // Requ√™te de base SANS filtres pour d√©boguer
      let query = supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false })

      console.log('üì° Ex√©cution de la requ√™te...')
      const { data, error } = await query

      if (error) {
        console.error('‚ùå Erreur Supabase:', error)
        throw new Error(`Erreur Supabase: ${error.message}`)
      }

      console.log('‚úÖ Donn√©es r√©cup√©r√©es:', data?.length || 0, 'produits')
      console.log('üì¶ Produits:', data)

      // Appliquer les filtres c√¥t√© client pour d√©boguer
      let filteredData = data || []

      if (filters) {
        console.log('üîß Application des filtres c√¥t√© client...')

        if (filters.search) {
          filteredData = filteredData.filter(
            product =>
              product.name
                ?.toLowerCase()
                .includes(filters.search.toLowerCase()) ||
              product.description
                ?.toLowerCase()
                .includes(filters.search.toLowerCase())
          )
        }

        if (filters.category && filters.category !== 'all') {
          filteredData = filteredData.filter(
            product => product.category === filters.category
          )
        }

        if (filters.status && filters.status !== 'all') {
          switch (filters.status) {
            case 'active':
              filteredData = filteredData.filter(
                product => product.active && !product.archived
              )
              break
            case 'archived':
              filteredData = filteredData.filter(product => product.archived)
              break
            case 'out_of_stock':
              filteredData = filteredData.filter(product => product.stock === 0)
              break
          }
        }

        if (filters.featured !== null) {
          filteredData = filteredData.filter(
            product => product.featured === filters.featured
          )
        }
      }

      console.log('üéØ Produits apr√®s filtrage:', filteredData?.length || 0)
      return filteredData
    } catch (error) {
      console.error('üí• Erreur ProductService.getProducts:', error)
      throw error
    }
  }

  // R√©cup√©rer un produit par ID
  static async getProductById (id: string): Promise<Product | null> {
    try {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('id', id)
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          return null // Produit non trouv√©
        }
        console.error('Erreur lors de la r√©cup√©ration du produit:', error)
        throw new Error('Impossible de r√©cup√©rer le produit')
      }

      return data
    } catch (error) {
      console.error('Erreur ProductService.getProductById:', error)
      throw error
    }
  }

  // Cr√©er un nouveau produit
  static async createProduct (productData: ProductFormData): Promise<Product> {
    try {
      console.log("üÜï Cr√©ation d'un nouveau produit:", productData)

      const newProduct = {
        ...productData,
        archived: false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }

      console.log('üì§ Envoi des donn√©es √† Supabase:', newProduct)

      const { data, error } = await supabase
        .from('products')
        .insert([newProduct])
        .select()
        .single()

      if (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du produit:', error)
        throw new Error(`Impossible de cr√©er le produit: ${error.message}`)
      }

      console.log('‚úÖ Produit cr√©√© avec succ√®s:', data)
      return data
    } catch (error) {
      console.error('üí• Erreur ProductService.createProduct:', error)
      throw error
    }
  }

  // Mettre √† jour un produit
  static async updateProduct (
    id: string,
    productData: Partial<ProductFormData>
  ): Promise<Product> {
    try {
      console.log('‚úèÔ∏è Mise √† jour du produit:', id, productData)

      const updateData = {
        ...productData,
        updated_at: new Date().toISOString()
      }

      console.log('üì§ Envoi des donn√©es de mise √† jour:', updateData)

      const { data, error } = await supabase
        .from('products')
        .update(updateData)
        .eq('id', id)
        .select()
        .single()

      if (error) {
        console.error('‚ùå Erreur lors de la mise √† jour du produit:', error)
        throw new Error(
          `Impossible de mettre √† jour le produit: ${error.message}`
        )
      }

      console.log('‚úÖ Produit mis √† jour avec succ√®s:', data)
      return data
    } catch (error) {
      console.error('üí• Erreur ProductService.updateProduct:', error)
      throw error
    }
  }

  // Archiver/d√©sarchiver un produit
  static async toggleArchiveProduct (
    id: string,
    archived: boolean
  ): Promise<Product> {
    try {
      const { data, error } = await supabase
        .from('products')
        .update({
          archived,
          active: !archived, // Si archiv√©, alors inactif
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single()

      if (error) {
        console.error("Erreur lors de l'archivage du produit:", error)
        throw new Error('Impossible de modifier le statut du produit')
      }

      return data
    } catch (error) {
      console.error('Erreur ProductService.toggleArchiveProduct:', error)
      throw error
    }
  }

  // Supprimer d√©finitivement un produit
  static async deleteProduct (id: string): Promise<void> {
    try {
      const { error } = await supabase.from('products').delete().eq('id', id)

      if (error) {
        console.error('Erreur lors de la suppression du produit:', error)
        throw new Error('Impossible de supprimer le produit')
      }
    } catch (error) {
      console.error('Erreur ProductService.deleteProduct:', error)
      throw error
    }
  }

  // Mettre √† jour le stock d'un produit
  static async updateStock (id: string, stock: number): Promise<Product> {
    try {
      const { data, error } = await supabase
        .from('products')
        .update({
          stock,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single()

      if (error) {
        console.error('Erreur lors de la mise √† jour du stock:', error)
        throw new Error('Impossible de mettre √† jour le stock')
      }

      return data
    } catch (error) {
      console.error('Erreur ProductService.updateStock:', error)
      throw error
    }
  }

  //Enregistrer le mouvement du stock
  static async addStockMovement (
    productId: string,
    newStock: number,
    movement: {
      type: 'in' | 'out' | 'adjustment'
      quantity: number
      reason: string
    }
  ): Promise<void> {
    try {
      // R√©cup√©rer l'ID de l'utilisateur connect√©
      const { data: userData } = await supabase.auth.getUser()
      const userId = userData?.user?.id || null

      const { error } = await supabase.from('stock_movements').insert({
        product_id: productId,
        type: movement.type,
        quantity_change: movement.quantity,
        reason: movement.reason,
        // La nouvelle quantit√© sera le nouveau stock, qui est d√©j√† calcul√©
        new_stock: newStock, // Nous ne le connaissons pas encore ici
        user_id: userId
      })

      if (error) {
        console.error('Erreur lors de l‚Äôajout du mouvement de stock:', error)
        throw new Error('Impossible d‚Äôenregistrer le mouvement de stock')
      }
    } catch (error) {
      console.error('Erreur ProductService.addStockMovement:', error)
      throw error
    }
  }

  //recuperer la liste des mouvements
  static async getStockMovementById (productId: string): Promise<StockMovementDb[]> {
    try {
      const { data, error } = await supabase
        .from('stock_movements')
        .select('*')
        .match({ product_id: productId });

      if (error) {
        console.error('Erreur lors de la r√©cup√©ration des mouvements de stock:', error)
        throw new Error('Impossible de r√©cup√©rer les mouvements de stock')
      }

      return data || [];
    } catch (error) {
      console.error('Erreur ProductService.getStockMovementById:', error)
      throw error;
    }
  }

  // R√©cup√©rer les produits en vedette
  static async getFeaturedProducts (limit: number = 8): Promise<Product[]> {
    try {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('featured', true)
        .eq('active', true)
        .eq('archived', false)
        .order('created_at', { ascending: false })
        .limit(limit)

      if (error) {
        console.error(
          'Erreur lors de la r√©cup√©ration des produits en vedette:',
          error
        )
        throw new Error('Impossible de r√©cup√©rer les produits en vedette')
      }

      return data || []
    } catch (error) {
      console.error('Erreur ProductService.getFeaturedProducts:', error)
      throw error
    }
  }

  // R√©cup√©rer les produits par cat√©gorie
  static async getProductsByCategory (
    category: string,
    limit?: number
  ): Promise<Product[]> {
    try {
      let query = supabase
        .from('products')
        .select('*')
        .eq('category', category)
        .eq('active', true)
        .eq('archived', false)
        .order('created_at', { ascending: false })

      if (limit) {
        query = query.limit(limit)
      }

      const { data, error } = await query

      if (error) {
        console.error(
          'Erreur lors de la r√©cup√©ration des produits par cat√©gorie:',
          error
        )
        throw new Error(
          'Impossible de r√©cup√©rer les produits de cette cat√©gorie'
        )
      }

      return data || []
    } catch (error) {
      console.error('Erreur ProductService.getProductsByCategory:', error)
      throw error
    }
  }

  // Rechercher des produits
  static async searchProducts (searchTerm: string): Promise<Product[]> {
    try {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .or(
          `name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,tags.cs.{${searchTerm}}`
        )
        .eq('active', true)
        .eq('archived', false)
        .order('created_at', { ascending: false })

      if (error) {
        console.error('Erreur lors de la recherche de produits:', error)
        throw new Error('Impossible de rechercher les produits')
      }

      return data || []
    } catch (error) {
      console.error('Erreur ProductService.searchProducts:', error)
      throw error
    }
  }
}
